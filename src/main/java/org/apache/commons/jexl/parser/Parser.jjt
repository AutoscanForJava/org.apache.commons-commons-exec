/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 *  Jexl : Java Expression Language
 *
 *  @author <a href="mailto:geirm@apache.org">Geir Magnusson Jr.</a>
 *  @author <a href="mailto:mhw@kremvax.net">Mark H. Wilkinson</a>
 *
 *  @version $Id$
 */

options
{
   MULTI=true;
   STATIC=false;
   VISITOR=true;
   NODE_CLASS="JexlNode";
   NODE_USES_PARSER=true;
   UNICODE_INPUT=true;
}

PARSER_BEGIN(Parser)

package org.apache.commons.jexl.parser;

import java.io.Reader;
import org.apache.commons.jexl.util.introspection.Info;

public class Parser extends StringParser
{
    /** Base debug information. */
    protected Info debug = null;

    public JexlNode parse(Reader reader, Info info)
        throws ParseException
    {
        ReInit(reader);
        /*
         *  lets do the 'Unique Init' in here to be
         *  safe - it's a pain to remember
         */

        JexlNode tree = JexlScript();
        tree.value = info;
        return tree;
    }
}

PARSER_END(Parser)


SKIP : /* WHITE SPACE */
{
  <COMMENT: ( "##" ( ~["\"","\n","\r"] )* ("\n" | "\r") ) >
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: (<DIGIT>)+ >
|
  < FLOAT_LITERAL: (<DIGIT>)+ "."(<DIGIT>)+ >
}

/*
 * Program structuring syntax follows.
 */

JexlNode JexlScript() :
{
   String name;
}
{
    (
       Statement()
    )*
    <EOF>
   { return jjtThis;}
}


void Block() :
{}
{
  "{" ( Statement() )* "}"
}

void EmptyFunction() : {}
{
    "empty"
    ( Reference() | "(" Expression() ")" )
}

void SizeFunction() : {}
{
    "size" "(" Expression() ")"
}

void Identifier() :
{
   Token t;
}
{
    t=<IDENTIFIER>
    { jjtThis.image = t.image; }
}


/*
 * Expression syntax follows.
 */

void Expression() : {}
{
        LOOKAHEAD( Reference() "=" )
  Assignment()
|
  ConditionalOrExpression()
}


void Assignment() #Assignment(2) : {}
{
  Reference() "=" Expression()
}

void ConditionalOrExpression() #void :
{}
{
  ConditionalAndExpression()
  (
    "||" ConditionalAndExpression() #OrNode(2)
  |
    "or" ConditionalAndExpression() #OrNode(2)
  )*
  (
    "?" Expression() ":" Expression() #TernaryNode(3)
  |
    "?:" Expression() #TernaryNode(2)
  )?
}

void ConditionalAndExpression() #void :
{}
{
  InclusiveOrExpression()
  (
    "&&" InclusiveOrExpression() #AndNode(2)
  |
    "and" InclusiveOrExpression() #AndNode(2)
  )*
}

void InclusiveOrExpression() #void :
{}
{
  ExclusiveOrExpression()
  ( "|" ExclusiveOrExpression() #BitwiseOrNode(2) )*
}

void ExclusiveOrExpression() #void :
{}
{
  AndExpression()
  ( "^" AndExpression() #BitwiseXorNode(2) )*
}

void AndExpression() #void :
{}
{
  EqualityExpression()
  ( "&" EqualityExpression() #BitwiseAndNode(2) )*
}

void EqualityExpression() #void :
{}
{
  RelationalExpression()
  (
     "==" RelationalExpression() #EQNode(2)
   |
     "eq" RelationalExpression() #EQNode(2)
   |
     "!=" RelationalExpression() #NENode(2)
   |
     "ne" RelationalExpression() #NENode(2)
  )*
}

void RelationalExpression() #void :
{}
{
  AdditiveExpression()
  (
    "<" AdditiveExpression() #LTNode(2)
   |
    "lt" AdditiveExpression() #LTNode(2)
   |
    ">" AdditiveExpression() #GTNode(2)
   |
    "gt" AdditiveExpression() #GTNode(2)
   |
    "<=" AdditiveExpression() #LENode(2)
   |
    "le" AdditiveExpression() #LENode(2)
   |
    ">=" AdditiveExpression() #GENode(2)
   |
    "ge" AdditiveExpression() #GENode(2)
  )*
}

void AdditiveExpression() #void :
{}
{
  MultiplicativeExpression()
  (
    "+" MultiplicativeExpression() #AddNode(2)
   |
    "-" MultiplicativeExpression() #SubtractNode(2)
  )*
}

void MultiplicativeExpression() #void :
{}
{
  UnaryExpression()
  (
    "*" UnaryExpression() #MulNode(2)
   |
    "/" UnaryExpression() #DivNode(2)
   |
    "div" UnaryExpression() #DivNode(2)
   |
    "%" UnaryExpression() #ModNode(2)
   |
    "mod" UnaryExpression() #ModNode(2)
  )*
}

void UnaryExpression() #void :
{}
{
  "-" UnaryExpression() #UnaryMinusNode(1)
|
  "~" UnaryExpression() #BitwiseComplNode(1)
|
  "!" UnaryExpression() #NotNode(1)
|
  "not" UnaryExpression() #NotNode(1)
|
  PrimaryExpression()
}

void PrimaryExpression() #void :
{}
{
  Literal()
|
  LOOKAHEAD(3)
  Reference()
|
  LOOKAHEAD("(") "(" Expression() ")"
|
  LOOKAHEAD("empty") EmptyFunction()
|
  LOOKAHEAD("size") SizeFunction()
|
  LOOKAHEAD("new" "(") Constructor()
|
  LOOKAHEAD( "{" MapEntry() ( "," MapEntry() )* "}" )
    MapLiteral()
|
  LOOKAHEAD( "[" Parameter() ( "," Parameter() )* "]" )
    ArrayLiteral()
}


void Literal() #void :
{
   Token t;
}
{
  IntegerLiteral()
|
  FloatLiteral()
|
  BooleanLiteral()
|
  StringLiteral()
|
  NullLiteral()
}

void NullLiteral() : {}
{
    "null"
}

void BooleanLiteral() #void :
{}
{
  "true" #TrueNode
|
  "false" #FalseNode
}

void IntegerLiteral() :
{
  Token t;
}
{
 (
  t=<INTEGER_LITERAL>
  { jjtThis.image = t.image; }
 )
}

void FloatLiteral() :
{
  Token t;
}
{
 (
  t=<FLOAT_LITERAL>
  { jjtThis.image = t.image; }
 )
}

void StringLiteral() :
{
   Token t;
}
{
 (
  t=<STRING_LITERAL>
  { jjtThis.image = Parser.buildString(t.image, true); }
 )
}

/*
 * Statement syntax follows.
 */

void Statement() #void :
{}
{
  ";"
|
  LOOKAHEAD(3)
  Block()
|
  LOOKAHEAD( Reference() ";" ) ReferenceExpression()
|
  LOOKAHEAD( Reference() "=" ) StatementExpression()
|
  ExpressionExpression()
|
  IfStatement()
|
  ForeachStatement()
|
  WhileStatement()
}


void ExpressionExpression() : {}
{
    Expression() ";"
}

void StatementExpression() : {}
{
  Assignment() ";"
}

void ReferenceExpression() : {}
{
  Reference() ";"
}

void IfStatement() :{}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}


void WhileStatement() :
{}
{
  "while" "(" Expression() ")" Statement()
}

void ForeachStatement() :
{}
{
  "foreach" "(" Reference() "in"  Reference() ")" Statement()
}

void ArrayLiteral() : {}
{
  "[" Parameter() ( "," Parameter() )* "]"
}

void MapLiteral() : {}
{
    "{"  MapEntry() ( "," MapEntry() )* "}"
}

void MapEntry() : {}
{
    Parameter() ":" Parameter()
}

void Method() #MethodNode: {}
{
   Identifier() "("[ Parameter() ( "," Parameter() )* ] ")"
}

void Function() #FunctionNode: {}
{
   Identifier() ":" Identifier() "("[ Parameter() ( "," Parameter() )* ] ")"
}

void ArrayAccess() : {}
{
    Identifier() ("[" ( LOOKAHEAD(3) Expression() | IntegerLiteral() | Reference() ) "]")+
}

void AnyMethod() #void : {}
{
    LOOKAHEAD("size") SizeMethod()
  |
    LOOKAHEAD(Identifier() "(") Method()
}

void Constructor() # ConstructorNode() : {}
{

  "new" "("[ Parameter() ( "," Parameter() )* ] ")"
}

void SizeMethod() : {}
{
    "size" "(" ")"
}

void Reference() : {}
{
  (LOOKAHEAD("new") Constructor() |
   LOOKAHEAD(Identifier() "[" ( Expression() | IntegerLiteral() | Reference()) "]") ArrayAccess() |
   LOOKAHEAD(Identifier() ":" Identifier() "(") Function() |
   LOOKAHEAD(Identifier() "(") Method() |
   Identifier() |
   MapLiteral())
  (LOOKAHEAD(2) "."
    (
      LOOKAHEAD(Identifier() "[" ( Expression() | IntegerLiteral() | Reference()) "]") ArrayAccess() |
//      (LOOKAHEAD(3) AnyMethod() | Identifier() |  IntegerLiteral() )
      (LOOKAHEAD(3) AnyMethod() | Identifier() |  IntegerLiteral() )

    )
  )*
}


void Parameter() #void: {}
{
   LOOKAHEAD(3) Expression() |  Literal() | Reference()
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: [ "a"-"z", "A"-"Z", "_", "$" ] >
|
  < #DIGIT: [ "0"-"9"] >
}

TOKEN :
{
    <STRING_LITERAL :
        ("\"" ( ~["\"","\n","\r"] | "\\" ["n","t","b","r","f","\\","\""] )* "\"" )
     |
        ("\'" ( ~["\'","\n","\r"] | "\\" ["n","t","b","r","f","\\","\'"])* "\'" )
    >
}
