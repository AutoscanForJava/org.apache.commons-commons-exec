/* Generated By:JJTree: Do not edit this line. ASTBitwiseOrNode.java */

package org.apache.commons.jexl.parser;

import org.apache.commons.jexl.JexlContext;
import org.apache.commons.jexl.util.Coercion;

/**
 * Bitwise Or. Syntax:
 *      a | b
 * Result is a Long
 * @author Dion Gillard
 * @since 1.1
 */

public class ASTBitwiseOrNode extends SimpleNode {
  public ASTBitwiseOrNode(int id) {
    super(id);
  }

  public ASTBitwiseOrNode(Parser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(ParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /**
   * @return a {@link Long} which is the bitwise or of the two operands.
   */
  public Object value(JexlContext context) throws Exception
  {
      Object left = ((SimpleNode) jjtGetChild(0)).value(context);
      Object right = ((SimpleNode) jjtGetChild(1)).value(context);
    
      Long l = left == null ? new Long(0) : Coercion.coerceLong(left);
      Long r = right == null ? new Long(0) : Coercion.coerceLong(right);
      return new Long(l.longValue() | r.longValue());
  }
}
